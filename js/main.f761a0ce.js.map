{"version":3,"file":"js/main.f761a0ce.js","mappings":"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","sources":["webpack://dodgy-slime/./src/constants/game.ts","webpack://dodgy-slime/./src/constants/character.ts","webpack://dodgy-slime/./src/constants/slime.ts","webpack://dodgy-slime/./src/constants/input.ts","webpack://dodgy-slime/./src/types/character.ts","webpack://dodgy-slime/./src/types/slime.ts","webpack://dodgy-slime/./src/types/scene.ts","webpack://dodgy-slime/./src/types/ui.ts","webpack://dodgy-slime/./src/types/animation.ts","webpack://dodgy-slime/./src/systems/animation/AnimationManager.ts","webpack://dodgy-slime/./src/systems/core/AssetLoader.ts","webpack://dodgy-slime/./src/entities/Entity.ts","webpack://dodgy-slime/./src/entities/slimes/behaviors/PurpleSlimeBehavior.ts","webpack://dodgy-slime/./src/systems/core/score/types.ts","webpack://dodgy-slime/./src/systems/core/score/ScoreSystem.ts","webpack://dodgy-slime/./src/scenes/test/TestScore.ts","webpack://dodgy-slime/./src/game.ts"],"sourcesContent":["export const WORLD = {\r\n    WIDTH: 318,\r\n    HEIGHT: 500,\r\n    PADDING: 20\r\n} as const\r\n\r\nexport const GAME = {\r\n    STRIPE: {\r\n        COUNT: 5,\r\n        WIDTH: WORLD.WIDTH / 5\r\n    }\r\n} as const","import { GAME, WORLD } from \"./game\";\r\n\r\nconst HEIGHT = 24;\r\nconst SCALE = 2;\r\n\r\nexport const CHARACTER = {\r\n    SCALE,\r\n    WIDTH: 13,\r\n    HEIGHT,\r\n    START_X: Math.floor(GAME.STRIPE.COUNT / 2) * GAME.STRIPE.WIDTH + GAME.STRIPE.WIDTH / 2,\r\n    START_Y: WORLD.HEIGHT - HEIGHT * SCALE / 2 - WORLD.PADDING,\r\n    FRAME_WIDTH: 20,\r\n    FRAME_HEIGHT: 23,\r\n    ATTACK_DISTANCE: 100\r\n} as const","export const SLIME = {\r\n    SCALE: 2,\r\n    START_Y: -40,\r\n    FRAME_WIDTH: 48,\r\n    FRAME_HEIGHT: 48,\r\n    WIDTH: 22,\r\n    HEIGHT: 18,\r\n    PROJECTILE_FRAME_WIDTH: 24,\r\n    PROJECTILE_FRAME_HEIGHT: 24,\r\n    PROJECTILE_WIDTH: 8,\r\n    PROJECTILE_HEIGHT: 8,\r\n    RED_ATTACK_HEIGHT: 39,\r\n    RED_ATTACK_WIDTH: 48,\r\n    BLUE_DUBLICANT_FRAME_WIDTH: 24,\r\n    BLUE_DUPLICANT_FRAME_HEIGHT: 24,\r\n    BLUE_DUPLICANT_WIDTH: 14,\r\n    BLUE_DUPLICANT_HEIGHT: 12,\r\n    BLUE_DUPLICANT_OFFSET_X: 12,\r\n    BLUE_DUPLICANT_OFFSET_Y: 3\r\n} as const","export const KEY_CODES = {\r\n    A: Phaser.Input.Keyboard.KeyCodes.A,\r\n    D: Phaser.Input.Keyboard.KeyCodes.D,\r\n    LEFT: Phaser.Input.Keyboard.KeyCodes.LEFT,\r\n    RIGHT: Phaser.Input.Keyboard.KeyCodes.RIGHT,\r\n    W: Phaser.Input.Keyboard.KeyCodes.W,\r\n    UP: Phaser.Input.Keyboard.KeyCodes.UP\r\n} as const\r\n\r\nexport const DOUBLE_TAP_THRESHOLD = 300 as const;","import { IEntity } from \"./entity\";\r\nimport { IInputManager } from \"./input\";\r\n\r\nexport enum CharacterTexture {\r\n    IDLE = 'character_idle',\r\n    WALK = 'character_walk', \r\n    DASH = 'character_dash',\r\n    DIE = 'character_die'\r\n}\r\n\r\nexport enum ViewDirection { RIGHT = 1, UP = 0, LEFT = -1 }\r\n\r\nexport enum CharacterStateType { \r\n    IDLE = 'idle', \r\n    WALK = 'walk', \r\n    DASH = 'dash',\r\n    ATTACK = 'attack',\r\n    DEAD = 'dead',\r\n}\r\n\r\nexport interface ICharacterState {\r\n        readonly type: CharacterStateType;\r\n    \r\n        enter(...args: unknown[]): void;\r\n        execute(...args: unknown[]): void;\r\n        exit(...args: unknown[]): void;\r\n}\r\n\r\nexport interface ICharacterStateManager {\r\n    changeState(newState: CharacterStateType, ...args: unknown[]): void;\r\n    execute(): void;\r\n    getCurrentStateType(): CharacterStateType;\r\n  }\r\n\r\n\r\nexport interface ICharacter extends IEntity {\r\n    currentLane: number;\r\n    viewDirection: ViewDirection;\r\n\r\n    get isInvulnerable(): boolean;\r\n\r\n    changeLane(newLane: number): void;\r\n    changeViewDirection(newDirection: ViewDirection): void;\r\n    startDying(): void;\r\n    makeInvulnerableFor(time: number): void\r\n    \r\n    readonly stateManager: ICharacterStateManager;\r\n    readonly inputManager: IInputManager;\r\n}","import { ICharacter } from \"./character\";\r\nimport { IEntity } from \"./entity\";\r\n\r\nexport enum SlimeType {\r\n    GREEN = 'GREEN',\r\n    PURPLE = 'PURPLE',\r\n    ORANGE = 'ORANGE',\r\n    RED = 'RED',\r\n    BLACK = 'BLACK',\r\n    BLUE = 'BLUE',\r\n    BLUE_DUPLICANT = 'BLUE_DUPLICANT'\r\n}\r\n\r\nexport enum SlimeTexture {\r\n    GREEN_MOVE = 'green_slime_move',\r\n    GREEN_DIE = 'green_slime_die',\r\n    PURPLE_MOVE = 'purple_slime_move',\r\n    PURPLE_DIE = 'purple_slime_die',\r\n    ORANGE_MOVE = 'orange_slime_move',\r\n    ORANGE_SHOOT = 'orange_slime_shoot',\r\n    ORANGE_DIE = 'orange_slime_die',\r\n    ORANGE_PROJECTILE = 'orange_slime_projectile',\r\n    RED_MOVE = 'red_slime_move',\r\n    RED_DIE = 'red_slime_die',\r\n    RED_ATTACK = 'red_slime_attack',\r\n    BLACK_MOVE = 'black_slime_move',\r\n    BLACK_DIE = 'black_slime_die',\r\n    BLACK_HIDE = 'black_slime_hide',\r\n    BLUE_MOVE = 'blue_slime_move',\r\n    BLUE_DUPLICATE = 'blue_slime_duplicate',\r\n    BLUE_DUPLICANT_MOVE = 'blue_slime_duplicant_move',\r\n    BLUE_DUPLICANT_DIE = 'blue_slime_duplicant_die'\r\n}\r\n\r\nexport interface IBaseSlimeConfig {\r\n    readonly type: SlimeType;\r\n    readonly lane: number;\r\n    readonly offsetY: number;\r\n    readonly maxHealth: number;\r\n    readonly speed: number;\r\n}\r\n\r\nexport interface IGreenSlimeConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.GREEN;\r\n    readonly jumpDelay: number;\r\n}\r\n\r\nexport interface IPurpleSlimeConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.PURPLE;\r\n    readonly laneChangeInterval: number;\r\n}\r\n\r\nexport interface IOrangeSlimeConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.ORANGE;\r\n    readonly shootDelay: number;\r\n    readonly projectileSpeed: number;\r\n}\r\n\r\nexport interface IRedSlimeConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.RED;\r\n    readonly attackDelay: number;\r\n    readonly thresholdYForAttack: number;\r\n}\r\n\r\nexport interface IBlackSlimeConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.BLACK;\r\n    readonly hidingZone: { maxY: number, minY: number }\r\n}\r\n\r\nexport interface IBlueSlimeConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.BLUE;\r\n    readonly duplicationDelay: number;\r\n    readonly thresholdYForDuplication: number;\r\n}\r\n\r\nexport interface IBlueSlimeDuplicantConfig extends IBaseSlimeConfig {\r\n    readonly type: SlimeType.BLUE_DUPLICANT;\r\n}\r\n\r\nexport type ISlimeConfig = | IGreenSlimeConfig \r\n                           | IPurpleSlimeConfig \r\n                           | IOrangeSlimeConfig \r\n                           | IRedSlimeConfig\r\n                           | IBlackSlimeConfig\r\n                           | IBlueSlimeConfig\r\n                           | IBlueSlimeDuplicantConfig ;\r\n\r\nexport interface ISlime extends IEntity {\r\n    character: ICharacter;\r\n    slimeType: SlimeType;\r\n\r\n    setBehavior(behavior: ISlimeBehavior): void;\r\n    resetState(): void;\r\n}\r\n\r\nexport interface ISlimeSpawnTimeoutParameters {\r\n    config: ISlimeConfig, \r\n    spawnDelayStart: number, \r\n    spawnDelayEnd: number, \r\n    onCreated: (slime: ISlime) => void\r\n}\r\n\r\nexport interface ISlimeBehavior{\r\n    slime: ISlime | null;\r\n    \r\n    update(time: number, delta: number): void;\r\n    onCollide(): void;\r\n    die(): void;\r\n    cleanup(): void;\r\n}\r\n\r\nexport interface ISlimeFactory {\r\n    createSlime(config: ISlimeConfig): ISlime;\r\n    createBehavior(config: ISlimeConfig, slime: ISlime): ISlimeBehavior;\r\n}","import { SlimeType } from \"./slime\";\r\n\r\nexport enum GameState {\r\n    PLAYING,\r\n    PAUSED,\r\n    GAME_OVER\r\n}\r\n\r\nexport interface IGameScene extends Phaser.Scene {\r\n    get currentState(): GameState\r\n}\r\n\r\nexport interface IGameStateManager {\r\n    changeState(state: GameState, callback: (...args: unknown[]) => void): void;\r\n    readonly state: GameState;\r\n}\r\n\r\nexport interface IUIController {\r\n    showPanel(panelType: 'pause' | 'gameOver'): void;\r\n    hidePanel(panelType: 'pause' | 'gameOver'): void;\r\n}\r\n\r\nexport interface SlimeSpawnConfig {\r\n    minSpawnDelay: number;\r\n    maxSpawnDelay: number;\r\n    maxAlive: number;\r\n    spawnEnabled: boolean;\r\n}\r\n\r\nexport interface ISlimeSpawner {\r\n    startSpawning(slimeTypes?: SlimeType[]): void;\r\n    stopSpawning(slimeTypes?: SlimeType[]): void;\r\n    setSpawnConfig(type: SlimeType, config: Partial<SlimeSpawnConfig>): void;\r\n    getActiveSlimeCount(type?: SlimeType): number;\r\n\r\n    destroy(): void;\r\n}","import { IGameScene } from \"./scene\";\r\n\r\nexport interface IHealthBar {\r\n    readonly scene: IGameScene;\r\n    readonly maxHealth: number;\r\n\r\n    get currentHealth(): number;\r\n    get position(): {x: number, y: number};\r\n\r\n    setPosition(x: number, y: number): void;\r\n    setHealth(newHealth: number): void;\r\n    destroy(): void;\r\n}\r\n\r\nexport enum HeartTexture {\r\n    FULL ='heart_full',\r\n    HALF = 'heart_half',\r\n    EMPTY = 'heart_empty'\r\n}","import { CharacterTexture } from \"./character\";\r\nimport { SlimeTexture } from \"./slime\";\r\n\r\n\r\nexport interface AnimationConfig {\r\n    key: string;\r\n    texture: CharacterTexture | SlimeTexture;\r\n    start: number;\r\n    end: number;\r\n    frameRate: number;\r\n    repeat: number;\r\n    yoyo?: boolean;\r\n}\r\n\r\nexport type AnimationTarget = Phaser.Scene | Phaser.GameObjects.GameObject & { anims: Phaser.Animations.AnimationState };\r\n\r\nexport enum CharacterAnimationKey {\r\n    IDLE = 'character_idle',\r\n    WALK_RIGHT = 'character_walk_right',\r\n    DASH_UP = 'character_dash_up',\r\n    DASH_RIGHT = 'character_dash_right',\r\n    DASH_DOWN = 'character_dash_down',\r\n    DIE_RIGHT = 'character_die_right',\r\n    DIE_UP = 'character_die_up'\r\n}\r\n\r\nexport enum GreenSlimeAnimationKey {\r\n    MOVE_DOWN = 'green_slime_move_down',\r\n    DIE_DOWN = 'greean_slime_die_down'\r\n}\r\n\r\nexport enum PurpleSlimeAnimationKey {\r\n    MOVE_DOWN = 'purple_slime_move_down',\r\n    MOVE_RIGHT = 'purple_slime_move_right',\r\n    DIE_DOWN = 'purple_slime_die_down',\r\n    DIE_RIGHT = 'purple_slime_die_right'\r\n}\r\n\r\nexport enum OrangeSlimeAnimationKey {\r\n    MOVE_DOWN = 'orange_slime_move_down',\r\n    SHOOT_DOWN = 'orange_slime_shoot_down',\r\n    DIE_DOWN = 'orange_slime_die_down',\r\n    PROJECTILE_HIT = 'orange_slime_projectile_hit'\r\n}\r\n\r\nexport enum RedSlimeAnimationKey {\r\n    MOVE_DOWN = 'red_slime_move_down',\r\n    DIE_DOWN = 'red_slime_die_down',\r\n    ATTACK = 'red_slime_attack'\r\n}\r\n\r\nexport enum BlackSlimeAnimationKey {\r\n    MOVE_DOWN = 'black_slime_move_down',\r\n    DIE_DOWN = 'black_slime_die_down',\r\n    HIDE = 'black_slime_hide'\r\n}\r\n\r\nexport enum BlueSlimeAnimationKey {\r\n    MOVE_DOWN = 'blue_slime_move_down',\r\n    DUPLICATE = 'blue_slime_duplicate'\r\n}\r\n\r\nexport enum BlueSlimeDuplicantAnimationKey {\r\n    MOVE_DOWN = 'blue_slime_duplicant_move_down',\r\n    MOVE_RIGHT = 'blue_slime_duplicant_move_right',\r\n    DIE_DOWN = 'blue_slime_duplicant_die_down'\r\n}\r\n","import { AnimationConfig, AnimationTarget, BlackSlimeAnimationKey, BlueSlimeAnimationKey, BlueSlimeDuplicantAnimationKey, CharacterAnimationKey, CharacterTexture, GreenSlimeAnimationKey, ICharacter, OrangeSlimeAnimationKey, PurpleSlimeAnimationKey, RedSlimeAnimationKey, SlimeTexture, SlimeType } from \"@/types\";\r\n\r\nclass AnimationManager {\r\n    static createAnimationFromConfig(object: AnimationTarget, animationConfig: AnimationConfig): void {\r\n        object.anims.create({\r\n            key: animationConfig.key,\r\n            frames: object.anims.generateFrameNumbers(animationConfig.texture, {\r\n                start: animationConfig.start,\r\n                end: animationConfig.end\r\n            }),\r\n            frameRate: animationConfig.frameRate,\r\n            repeat: animationConfig.repeat,\r\n            yoyo: animationConfig?.yoyo,\r\n            \r\n        });\r\n    }\r\n}\r\n\r\nexport class CharacterAnimationManager extends AnimationManager {\r\n    private static created = false;\r\n    private static readonly ANIMATION_CONFIGS: readonly AnimationConfig[] = [\r\n        { key: CharacterAnimationKey.IDLE, texture: CharacterTexture.IDLE, start: 0, end: 7, frameRate: 10, repeat: -1 },\r\n        { key: CharacterAnimationKey.WALK_RIGHT, texture: CharacterTexture.WALK, start: 0, end: 3, frameRate: 15, repeat: 0 },\r\n        { key: CharacterAnimationKey.DASH_RIGHT, texture: CharacterTexture.DASH, start: 0, end: 3, frameRate: 15, repeat: 0 },\r\n        { key: CharacterAnimationKey.DASH_UP, texture: CharacterTexture.DASH, start: 4, end: 7, frameRate: 15, repeat: 0 },\r\n        { key: CharacterAnimationKey.DASH_DOWN, texture: CharacterTexture.DASH, start: 8, end: 11, frameRate: 15, repeat: 0 },\r\n        { key: CharacterAnimationKey.DIE_RIGHT, texture: CharacterTexture.DIE, start: 4, end: 7, frameRate: 10, repeat: 0 },\r\n        { key: CharacterAnimationKey.DIE_UP, texture: CharacterTexture.DIE, start: 0, end: 3, frameRate: 10, repeat: 0 },\r\n    ];\r\n\r\n    static createCharacterAnimations(character: ICharacter): void {\r\n        if (this.created) return;\r\n\r\n        this.ANIMATION_CONFIGS.forEach(config => {\r\n            this.createAnimationFromConfig(character, config);\r\n        });\r\n        \r\n        this.created = true;\r\n    }\r\n\r\n    static reset() {\r\n        this.created = false;\r\n    }\r\n}\r\n\r\nexport class SlimeAnimationManager extends AnimationManager {\r\n    private static readonly ANIMATION_CONFIGS: Record<SlimeType, AnimationConfig[]> = {\r\n        [SlimeType.GREEN]: \r\n        [\r\n            { key: GreenSlimeAnimationKey.MOVE_DOWN, texture: SlimeTexture.GREEN_MOVE, start: 0, end: 3, frameRate: 10, repeat: 0, yoyo: true },\r\n            { key: GreenSlimeAnimationKey.DIE_DOWN, texture: SlimeTexture.GREEN_DIE, start: 0, end: 5, frameRate: 10, repeat: 0 },\r\n        ],\r\n        [SlimeType.PURPLE]:\r\n        [\r\n            { key: PurpleSlimeAnimationKey.MOVE_DOWN, texture: SlimeTexture.PURPLE_MOVE, start: 0, end: 3, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: PurpleSlimeAnimationKey.MOVE_RIGHT, texture: SlimeTexture.PURPLE_MOVE, start: 4, end: 7, frameRate: 10, repeat: 0, yoyo: true },\r\n            { key: PurpleSlimeAnimationKey.DIE_DOWN, texture: SlimeTexture.PURPLE_DIE, start: 0, end: 4, frameRate: 10, repeat: 0 },\r\n            { key: PurpleSlimeAnimationKey.DIE_RIGHT, texture: SlimeTexture.PURPLE_DIE, start: 5, end: 9, frameRate: 10, repeat: 0 },\r\n        ],\r\n        [SlimeType.ORANGE]:\r\n        [\r\n            { key: OrangeSlimeAnimationKey.PROJECTILE_HIT, texture: SlimeTexture.ORANGE_PROJECTILE, start: 0, end: 3, frameRate: 10, repeat: 0 },\r\n            { key: OrangeSlimeAnimationKey.MOVE_DOWN, texture: SlimeTexture.ORANGE_MOVE, start: 0, end: 3, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: OrangeSlimeAnimationKey.DIE_DOWN, texture: SlimeTexture.ORANGE_DIE, start: 0, end: 5, frameRate: 10, repeat: 0 },\r\n            { key: OrangeSlimeAnimationKey.SHOOT_DOWN, texture: SlimeTexture.ORANGE_SHOOT, start: 0, end: 5, frameRate: 10, repeat: 0},\r\n        ],\r\n        [SlimeType.RED]: \r\n        [\r\n            { key: RedSlimeAnimationKey.MOVE_DOWN, texture: SlimeTexture.RED_MOVE, start: 0, end: 3, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: RedSlimeAnimationKey.DIE_DOWN, texture: SlimeTexture.RED_DIE, start: 0, end: 5, frameRate: 10, repeat: 0 },\r\n            { key: RedSlimeAnimationKey.ATTACK, texture: SlimeTexture.RED_ATTACK, start: 0, end: 6, frameRate: 15, repeat: 0, yoyo: true },\r\n        ],\r\n        [SlimeType.BLACK]: \r\n        [\r\n            { key: BlackSlimeAnimationKey.MOVE_DOWN, texture: SlimeTexture.BLACK_MOVE, start: 0, end: 3, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: BlackSlimeAnimationKey.DIE_DOWN, texture: SlimeTexture.BLACK_DIE, start: 0, end: 5, frameRate: 10, repeat: 0 },\r\n            { key: BlackSlimeAnimationKey.HIDE, texture: SlimeTexture.BLACK_HIDE, start: 0, end: 5, frameRate: 15, repeat: 0 },\r\n        ],\r\n        [SlimeType.BLUE]: \r\n        [\r\n            { key: BlueSlimeAnimationKey.MOVE_DOWN, texture: SlimeTexture.BLUE_MOVE, start: 0, end: 3, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: BlueSlimeAnimationKey.DUPLICATE, texture: SlimeTexture.BLUE_DUPLICATE, start: 0, end: 9, frameRate: 10, repeat: 0 },\r\n        ],\r\n        [SlimeType.BLUE_DUPLICANT]: \r\n        [\r\n            { key: BlueSlimeDuplicantAnimationKey.MOVE_DOWN, texture: SlimeTexture.BLUE_DUPLICANT_MOVE, start: 0, end: 3, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: BlueSlimeDuplicantAnimationKey.MOVE_RIGHT, texture: SlimeTexture.BLUE_DUPLICANT_MOVE, start: 4, end: 7, frameRate: 10, repeat: -1, yoyo: true },\r\n            { key: BlueSlimeDuplicantAnimationKey.DIE_DOWN, texture: SlimeTexture.BLUE_DUPLICANT_DIE, start: 0, end: 7, frameRate: 10, repeat: 0 },\r\n        ],\r\n    };\r\n\r\n    private static createdAnimations: Set<SlimeType> = new Set();\r\n\r\n    static createSlimeAnimations(scene: Phaser.Scene, slimeType: SlimeType): void {\r\n        if (this.createdAnimations.has(slimeType)) return;\r\n\r\n        this.ANIMATION_CONFIGS[slimeType].forEach((animationConfig: AnimationConfig) => {\r\n            this.createAnimationFromConfig(scene, animationConfig);\r\n        })\r\n\r\n        this.createdAnimations.add(slimeType);\r\n    }\r\n\r\n    static reset() {\r\n        this.createdAnimations.clear()\r\n    }\r\n}","import { CHARACTER, SLIME } from '@/constants';\r\nimport { CharacterTexture, SlimeTexture } from '@/types';\r\n\r\n\r\nexport interface IAssetLoader {\r\n    loadFonts(): IAssetLoader;\r\n    loadCharacterAssets(): IAssetLoader;\r\n    loadSlimeAssets(): IAssetLoader;\r\n    loadHUDAssets(): IAssetLoader;\r\n}\r\n\r\nexport class AssetLoader implements IAssetLoader {\r\n    constructor(private scene: Phaser.Scene) {}\r\n\r\n    loadFonts(): IAssetLoader {\r\n        this.scene.load.bitmapFont('EpilepsySans', 'assets/fonts/bitmap/EpilepsySans/EpilepsySans.png', 'assets/fonts/bitmap/EpilepsySans/EpilepsySans.fnt');\r\n        this.scene.load.bitmapFont('Monocraft', 'assets/fonts/bitmap/Monocraft/Monocraft.png', 'assets/fonts/bitmap/Monocraft/Monocraft.fnt');\r\n        this.scene.load.bitmapFont('TeenyTinyPixls', 'assets/fonts/bitmap/TeenyTinyPixls/TeenyTinyPixls.png', 'assets/fonts/bitmap/TeenyTinyPixls/TeenyTinyPixls.xml');\r\n        return this;\r\n    }\r\n\r\n    loadHUDAssets(): IAssetLoader {\r\n        this.scene.load.image('red-heart-full', 'assets/ui/hud/new-health-bar/red-heart-full.png');\r\n        this.scene.load.image('red-heart-half', 'assets/ui/hud/new-health-bar/red-heart-half.png');\r\n        this.scene.load.image('red-heart-empty', 'assets/ui/hud/new-health-bar/red-heart-empty.png');\r\n        this.scene.load.image('golden-heart-full', 'assets/ui/hud/new-health-bar/golden-heart-full.png');\r\n        this.scene.load.image('golden-heart-half', 'assets/ui/hud/new-health-bar/golden-heart-half.png');\r\n        this.scene.load.image('golden-heart-empty', 'assets/ui/hud/new-health-bar/golden-heart-empty.png');\r\n        return this;\r\n    }\r\n\r\n    loadCharacterAssets(): IAssetLoader {\r\n        const frameConfig = {\r\n            frameWidth: CHARACTER.FRAME_WIDTH,\r\n            frameHeight: CHARACTER.FRAME_HEIGHT\r\n        };\r\n\r\n        this.scene.load.spritesheet(CharacterTexture.IDLE, 'assets/main-character/idle/idle.png', frameConfig);\r\n        this.scene.load.spritesheet(CharacterTexture.WALK, 'assets/main-character/walk/walk.png', frameConfig);\r\n        this.scene.load.spritesheet(CharacterTexture.DASH, 'assets/main-character/dash/dash.png', frameConfig);\r\n        this.scene.load.spritesheet(CharacterTexture.DIE, 'assets/main-character/die/die.png', {...frameConfig, frameHeight: 30});\r\n\r\n        return this;\r\n    }\r\n\r\n    loadSlimeAssets(): IAssetLoader {\r\n        const slimeFrameConfig: Phaser.Types.Loader.FileTypes.ImageFrameConfig = {\r\n            frameWidth: SLIME.FRAME_WIDTH,\r\n            frameHeight: SLIME.FRAME_HEIGHT\r\n        };\r\n\r\n        const projectileFrameConfig: Phaser.Types.Loader.FileTypes.ImageFrameConfig = {\r\n            frameWidth: SLIME.PROJECTILE_FRAME_WIDTH,\r\n            frameHeight: SLIME.PROJECTILE_FRAME_HEIGHT\r\n        }\r\n\r\n        const duplicantFrameConfig: Phaser.Types.Loader.FileTypes.ImageFrameConfig = {\r\n            frameWidth: SLIME.BLUE_DUBLICANT_FRAME_WIDTH,\r\n            frameHeight: SLIME.BLUE_DUPLICANT_FRAME_HEIGHT\r\n        }\r\n\r\n        this.scene.load.spritesheet(SlimeTexture.GREEN_MOVE, 'assets/slimes/green_slime/move/move.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.GREEN_DIE, 'assets/slimes/green_slime/die/die.png', slimeFrameConfig);\r\n\r\n        this.scene.load.spritesheet(SlimeTexture.PURPLE_MOVE, 'assets/slimes/purple_slime/move/move.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.PURPLE_DIE, 'assets/slimes/purple_slime/die/die.png', slimeFrameConfig);\r\n\r\n        this.scene.load.spritesheet(SlimeTexture.ORANGE_DIE, 'assets/slimes/orange_slime/die/die.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.ORANGE_MOVE, 'assets/slimes/orange_slime/move/move.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.ORANGE_SHOOT, 'assets/slimes/orange_slime/shoot/shoot.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.ORANGE_PROJECTILE, 'assets/slimes/orange_slime/projectile.png', projectileFrameConfig);\r\n\r\n        this.scene.load.spritesheet(SlimeTexture.RED_DIE, 'assets/slimes/red_slime/die/die.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.RED_MOVE, 'assets/slimes/red_slime/move/move.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.RED_ATTACK, 'assets/slimes/red_slime/attack/attack.png', slimeFrameConfig);\r\n\r\n        this.scene.load.spritesheet(SlimeTexture.BLACK_DIE, 'assets/slimes/black_slime/die/die.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.BLACK_MOVE, 'assets/slimes/black_slime/move/move.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.BLACK_HIDE, 'assets/slimes/black_slime/hide/hide.png', slimeFrameConfig);\r\n\r\n        this.scene.load.spritesheet(SlimeTexture.BLUE_DUPLICATE, 'assets/slimes/blue_slime/duplicate/duplicate.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.BLUE_MOVE, 'assets/slimes/blue_slime/move/move.png', slimeFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.BLUE_DUPLICANT_DIE, 'assets/slimes/blue_slime/duplicant/die/die.png', duplicantFrameConfig);\r\n        this.scene.load.spritesheet(SlimeTexture.BLUE_DUPLICANT_MOVE, 'assets/slimes/blue_slime/duplicant/move/move.png', duplicantFrameConfig);\r\n\r\n        return this;\r\n    }\r\n}","import { GameState, IEntity, IGameScene } from \"@/types\";\r\n\r\ninterface Bounds {\r\n    left: boolean,\r\n    top: boolean,\r\n    right: boolean,\r\n    bottom: boolean\r\n}\r\n\r\nexport class Entity extends Phaser.Physics.Arcade.Sprite implements IEntity {\r\n    public maxHealth: number;\r\n    public health: number;\r\n\r\n    public isDead: boolean = false;\r\n\r\n    protected _isDestroyed: boolean = false;\r\n    protected _cleanupCallbacks: (() => void)[] = [];\r\n\r\n    public scene: IGameScene;\r\n\r\n    constructor(\r\n        scene: IGameScene, \r\n        x: number, \r\n        y: number, \r\n        texture: string, \r\n        maxHealth: number, \r\n        frameWidth: number, \r\n        frameHeight: number, \r\n        bodyWidth: number, \r\n        bodyHeight: number, \r\n        makeCircleCollider: boolean = false) {\r\n        super(scene, x, y, texture);\r\n\r\n        this.scene = scene;\r\n\r\n        scene.add.existing(this);\r\n        scene.physics.add.existing(this);\r\n\r\n        scene.events.on(Phaser.Scenes.Events.UPDATE, this._onUpdate, this);\r\n\r\n        this.addCleanupCallback(() => {\r\n            scene.events.off(Phaser.Scenes.Events.UPDATE, this._onUpdate, this);\r\n        });\r\n\r\n        this.maxHealth = maxHealth;\r\n        this.health = maxHealth;\r\n\r\n        this.setupCollider(bodyWidth, bodyHeight, frameWidth, frameHeight, makeCircleCollider)\r\n    }\r\n\r\n    private setupCollider(bodyWidth: number, bodyHeight: number, frameWidth: number, frameHeight: number, makeCircleCollider: boolean) {\r\n        this.setOrigin(0.5);\r\n\r\n        if (makeCircleCollider) {\r\n            this.setCircle(bodyWidth / 2)\r\n        } else {\r\n            this.setSize(bodyWidth, bodyHeight);\r\n        }\r\n\r\n        const offsetX = (frameWidth - bodyWidth) / 2;\r\n        const offsetY = (frameHeight - bodyHeight) / 2;\r\n\r\n        this.setOffset(offsetX, offsetY);\r\n    }\r\n\r\n\r\n    takeDamage(damage: number): void {\r\n        const newHealth = this.health - damage;\r\n\r\n        if (newHealth <= 0) {\r\n            this.die();\r\n            this.health = 0;\r\n            return;\r\n        }\r\n\r\n        if (newHealth >= this.maxHealth) {\r\n            this.health = this.maxHealth;\r\n            return;\r\n        }\r\n\r\n        this.health = newHealth;\r\n    }\r\n\r\n    die(): void {\r\n        this.isDead = true;\r\n    };\r\n\r\n    get isAlive(): boolean {\r\n        return this.health > 0;\r\n    }\r\n\r\n    protected checkOutOfBoundsY(): boolean {\r\n        return this.y > Number(this.scene.sys.game.config.height) + this.height / 2;\r\n    }\r\n\r\n    // Безопасное уничтожение с очисткой ресурсов\r\n    public safeDestroy(): void {\r\n        if (this._isDestroyed) return;\r\n\r\n        this._isDestroyed = true;\r\n        this.onBeforeDestroy();\r\n        this._cleanupResources();\r\n\r\n        if (this.body) {\r\n            this.body.enable = false;\r\n        }\r\n\r\n        this.destroy();\r\n    }\r\n\r\n    protected onBeforeDestroy(): void {\r\n        // Переопределяется в наследниках\r\n    }\r\n\r\n    protected addCleanupCallback(callback: () => void): void {\r\n        this._cleanupCallbacks.push(callback);\r\n    }\r\n\r\n    private _cleanupResources(): void {\r\n        this._cleanupCallbacks.forEach(cb => cb());\r\n        this._cleanupCallbacks = [];\r\n    }\r\n\r\n    private _onUpdate(time: number, delta: number): void {  \r\n        if (!this.scene || this._isDestroyed || !this.active || !this.body || this.scene.currentState === GameState.PAUSED) {\r\n            return\r\n        };\r\n        this.onUpdate(time, delta);\r\n    }\r\n\r\n    protected onUpdate(time: number, delta: number, ...args: any): void {\r\n        // Переопределяется в наследниках\r\n    }\r\n}","import { DEPTH_LAYERS, GAME } from \"@/constants\";\r\nimport { ISlime, PurpleSlimeAnimationKey } from \"@/types\";\r\nimport { BaseSlimeBehavior } from \"./BaseSlimeBehavior\";\r\n\r\nenum MovementDirection {\r\n    RIGHT = 1,\r\n    LEFT = -1,\r\n    DOWN = 0\r\n}\r\n\r\nexport class PurpleSlimeBehavior extends BaseSlimeBehavior {\r\n    private currentLane: number;\r\n    private currentDirection: MovementDirection = MovementDirection.DOWN;\r\n\r\n    constructor(\r\n        slime: ISlime, \r\n        private speed: number, \r\n        private laneChangeInterval: number\r\n    ) {\r\n        super(slime);\r\n\r\n        this.slime.setDepth(DEPTH_LAYERS.ENTITIES.SLIME.OVER)\r\n\r\n        this.currentLane = Math.floor(slime.x / GAME.STRIPE.WIDTH);\r\n        this.initMovement(MovementDirection.DOWN);\r\n        this.scheduleLaneChange();\r\n    }\r\n\r\n    private initMovement(direction: MovementDirection): void {\r\n        if (this.slime.isDead || !this.slime.active) return;\r\n\r\n        this.currentDirection = direction;\r\n        this.slime.setVelocity(0, 0);\r\n\r\n        switch (direction) {\r\n            case MovementDirection.DOWN:\r\n                this.slime.setVelocityY(this.speed);\r\n                this.slime.anims.play(PurpleSlimeAnimationKey.MOVE_DOWN);\r\n                break;\r\n\r\n            case MovementDirection.RIGHT:\r\n            case MovementDirection.LEFT:\r\n                this.slime.setVelocity(this.speed * direction, 0);\r\n                this.slime.anims.play(PurpleSlimeAnimationKey.MOVE_RIGHT);\r\n                this.slime.flipX = direction === MovementDirection.LEFT;\r\n\r\n                this.addTimer(this.slime.scene.time.delayedCall(\r\n                    GAME.STRIPE.WIDTH / this.speed * 1000,\r\n                    () => {\r\n                        this.slime.flipX = false;\r\n                        this.currentLane += direction;\r\n                        this.initMovement(MovementDirection.DOWN);\r\n                    }\r\n                ));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private scheduleLaneChange(): void {\r\n        if (!this.slime.active) return;\r\n        \r\n        this.addTimer(this.slime.scene.time.delayedCall(\r\n            this.laneChangeInterval,\r\n            this.changeLane.bind(this)\r\n        ));\r\n    }\r\n\r\n    private changeLane(): void {\r\n        let direction: MovementDirection;\r\n\r\n        switch (this.currentLane) {\r\n            case 0:\r\n                direction = MovementDirection.RIGHT;\r\n                break;\r\n            case 4:\r\n                direction = MovementDirection.LEFT;\r\n                break;\r\n            default:\r\n                direction = Phaser.Math.Between(0, 1) \r\n                ? MovementDirection.LEFT \r\n                : MovementDirection.RIGHT;\r\n                break;\r\n        }\r\n    \r\n        this.initMovement(direction);\r\n        this.scheduleLaneChange();\r\n    }\r\n\r\n    protected playDeathAnimation(): void {\r\n        const animation = this.currentDirection === MovementDirection.DOWN\r\n            ? PurpleSlimeAnimationKey.DIE_DOWN\r\n            : PurpleSlimeAnimationKey.DIE_RIGHT;\r\n            \r\n        this.slime.anims.play(animation);\r\n        this.slime.flipX = this.currentDirection === MovementDirection.LEFT;\r\n    }\r\n\r\n    protected stopMovement(): void {\r\n        this.slime.setVelocity(0, 0);\r\n    }\r\n}","export enum GAME_EVENTS {\r\n    SLIME_KILLED = 'slime_killed',\r\n    CHARACTER_TOOK_DAMAGE = 'character_took_damage',\r\n    SLIME_PASSED = 'slime_passed',\r\n    PROJECTILE_CAUGHT = 'projectile_caught'\r\n}\r\n\r\n/**\r\n * Настройки системы очков (можно кастомизировать)\r\n */\r\nexport interface ScoreSystemConfig {\r\n    tookDamage: number;\r\n    /** Баллы за убийство слайма (без комбо) */\r\n    slimeKilled: number;\r\n    /** Баллы за поимку снаряда */\r\n    projectileCaught: number;\r\n    /** Шаг увеличения множителя за каждое комбо (например, 0.2 = +20% за каждое убийство в комбо) */\r\n    comboMultiplierStep: number;\r\n    slimePassed: number;\r\n    /** Время до автоматического сброса комбо в миллисекундах */\r\n    comboTimeout: number;\r\n}","import { GAME_EVENTS, ScoreSystemConfig } from \"./types\";\r\n\r\n/**\r\n * Интерфейс системы очков и комбо\r\n */\r\ninterface IScoreSystem {\r\n    /** Получить текущий счёт */\r\n    getCurrentScore(): number;\r\n    /** Получить текущее комбо (количество последовательных убийств) */\r\n    getCurrentCombo(): number;\r\n    /** Получить текущий множитель комбо */\r\n    getCurrentMultiplier(): number;\r\n    /** Уничтожить систему (очистка listeners) */\r\n    destroy(): void;\r\n}\r\n\r\n/**\r\n * Система управления игровыми очками и комбо\r\n */\r\nexport class ScoreSystem implements IScoreSystem {\r\n    private score: number = 0;\r\n    private combo: number = 0;\r\n    private comboMultiplier: number = 1;\r\n    private scene: Phaser.Scene;\r\n    private comboTimeout: Phaser.Time.TimerEvent | null = null;\r\n    private readonly config: ScoreSystemConfig;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {Phaser.Scene} scene - Phaser сцена, на которой работает система\r\n     * @param {ScoreSystemConfig} [config] - Конфигурация системы очков (опционально)\r\n     */\r\n    constructor(scene: Phaser.Scene, config?: Partial<ScoreSystemConfig>) {\r\n        this.scene = scene;\r\n        \r\n        // Дефолтные настройки\r\n        this.config = {\r\n            tookDamage: -50,\r\n            slimePassed: -90,\r\n            slimeKilled: 100,\r\n            projectileCaught: 50,\r\n            comboMultiplierStep: 0.2,\r\n            comboTimeout: 5000, // 5 секунд на комбо по умолчанию\r\n            ...config // Переопределение дефолтных значений\r\n        };\r\n\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Настройка обработчиков игровых событий\r\n     * @private\r\n     */\r\n    private setupEventListeners(): void {\r\n        this.scene.events.on(GAME_EVENTS.SLIME_KILLED, this.onSlimeKilled, this);\r\n        this.scene.events.on(GAME_EVENTS.CHARACTER_TOOK_DAMAGE, () => {\r\n            this.onTookDamage(); this.onComboBreak()\r\n        }, this);\r\n        this.scene.events.on(GAME_EVENTS.SLIME_PASSED, () => {\r\n            this.onSlimePassed(); this.onComboBreak()\r\n        }, this);\r\n        this.scene.events.on(GAME_EVENTS.PROJECTILE_CAUGHT, this.onProjectileCaught, this);\r\n    }\r\n\r\n    /**\r\n     * Запускает/сбрасывает таймер комбо\r\n     * @private\r\n     */\r\n    private resetComboTimer(): void {\r\n        // Очищаем предыдущий таймер, если есть\r\n        if (this.comboTimeout) {\r\n            this.comboTimeout.destroy();\r\n        }\r\n        \r\n        // Устанавливаем новый таймер\r\n        this.comboTimeout = this.scene.time.delayedCall(\r\n            this.config.comboTimeout,\r\n            () => {\r\n                if (this.combo > 0) {\r\n                    this.resetCombo();\r\n                    this.scene.events.emit('combo_timeout');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Обработчик убийства слайма\r\n     * @private\r\n     */\r\n    private onSlimeKilled(): void {\r\n        this.increaseCombo();\r\n        const points = this.config.slimeKilled * this.comboMultiplier;\r\n        this.addScore(points);\r\n        this.resetComboTimer(); // Сбрасываем таймер при новом убийстве\r\n    }\r\n\r\n    private onTookDamage(): void {\r\n        this.addScore(-this.score * 0.1)\r\n    }\r\n\r\n    private onSlimePassed(): void {\r\n        this.addScore(-this.score * 0.3)\r\n    }\r\n\r\n    /**\r\n     * Обработчик поимки снаряда\r\n     * @private\r\n     */\r\n    private onProjectileCaught(): void {\r\n        this.addScore(this.config.projectileCaught);\r\n    }\r\n\r\n    /**\r\n     * Обработчик событий, прерывающих комбо\r\n     * @private\r\n     */\r\n    private onComboBreak(): void {\r\n        this.resetCombo();\r\n    }\r\n\r\n    /**\r\n     * Добавить очки к общему счёту\r\n     * @param {number} points - Количество очков для добавления\r\n     * @private\r\n     */\r\n    private addScore(points: number): void {\r\n        this.score += Math.floor(points);\r\n        this.scene.events.emit('score_updated', this.score);\r\n    }\r\n\r\n    /**\r\n     * Увеличить счётчик комбо и пересчитать множитель\r\n     * @private\r\n     */\r\n    private increaseCombo(): void {\r\n        this.combo++;\r\n        this.comboMultiplier = 1 + (this.combo * this.config.comboMultiplierStep);\r\n        this.scene.events.emit('combo_updated', this.combo, this.comboMultiplier);\r\n    }\r\n\r\n    /**\r\n     * Сбросить комбо и множитель\r\n     * @private\r\n     */\r\n    private resetCombo(): void {\r\n        if (this.combo > 0) {\r\n            this.combo = 0;\r\n            this.comboMultiplier = 1;\r\n            \r\n            // Очищаем таймер\r\n            if (this.comboTimeout) {\r\n                this.comboTimeout.destroy();\r\n                this.comboTimeout = null;\r\n            }\r\n            \r\n            this.scene.events.emit('combo_updated');\r\n            this.scene.events.emit('combo_reset');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получить текущий счёт\r\n     * @returns {number} Текущее количество очков\r\n     */\r\n    public getCurrentScore(): number {\r\n        return this.score;\r\n    }\r\n\r\n    /**\r\n     * Получить текущее комбо\r\n     * @returns {number} Количество последовательных убийств\r\n     */\r\n    public getCurrentCombo(): number {\r\n        return this.combo;\r\n    }\r\n\r\n    /**\r\n     * Получить текущий множитель комбо\r\n     * @returns {number} Текущий множитель (например 1.4 для 40% бонуса)\r\n     */\r\n    public getCurrentMultiplier(): number {\r\n        return this.comboMultiplier;\r\n    }\r\n\r\n    /**\r\n     * Очистка всех listeners и таймеров\r\n     */\r\n    public destroy(): void {\r\n        this.scene.events.off(GAME_EVENTS.SLIME_KILLED, this.onSlimeKilled, this);\r\n        this.scene.events.off(GAME_EVENTS.CHARACTER_TOOK_DAMAGE, this.onComboBreak, this);\r\n        this.scene.events.off(GAME_EVENTS.SLIME_PASSED, this.onComboBreak, this);\r\n        this.scene.events.off(GAME_EVENTS.PROJECTILE_CAUGHT, this.onProjectileCaught, this);\r\n        \r\n        if (this.comboTimeout) {\r\n            this.comboTimeout.destroy();\r\n        }\r\n    }\r\n}","import { AssetLoader, IAssetLoader } from \"@/systems\";\r\nimport { GAME_EVENTS, ScoreSystem } from \"@/systems/core/score\";\r\nimport { ScoreSystemConfig } from \"@/systems/core/score/\";\r\n\r\nclass ScoreRenderer {\r\n    private readonly scene: Phaser.Scene;\r\n    private readonly scoreSystem: ScoreSystem;\r\n    private readonly container: Phaser.GameObjects.Container;\r\n    private readonly scoreText: Phaser.GameObjects.BitmapText;\r\n    private readonly comboText: Phaser.GameObjects.BitmapText;\r\n    private readonly comboTimeLeftText: Phaser.GameObjects.BitmapText;\r\n    private readonly comboTimeLeftBar: Phaser.GameObjects.Graphics;\r\n    \r\n    private comboTimeLeft = 0;\r\n    private lastScore = 0;\r\n    private scoreTextWidth = 0;\r\n    private comboTextWidth = 0;\r\n\r\n    constructor(scene: Phaser.Scene, scoreSystem: ScoreSystem) {\r\n        this.scene = scene;\r\n        this.scoreSystem = scoreSystem;\r\n        \r\n        // Создаем основной контейнер\r\n        this.container = scene.add.container(20, 20);\r\n        \r\n        // Создаем текст счета (выровнен по левому краю контейнера)\r\n        this.scoreText = scene.add.bitmapText(0, 0, 'TeenyTinyPixls', '0', 15)\r\n            .setTintFill(0xFFFFFF)\r\n            .setOrigin(0, 0);\r\n        this.scoreTextWidth = this.scoreText.width;\r\n        \r\n        // Создаем текст комбо (справа от счета)\r\n        this.comboText = scene.add.bitmapText(this.scoreTextWidth, 2, 'TeenyTinyPixls', '', 10)\r\n            .setTintFill(0xffcc00)\r\n            .setOrigin(0, 0);\r\n        this.comboTextWidth = this.comboText.width;\r\n        \r\n        // Создаем UI таймера комбо (под текстом счета)\r\n        this.comboTimeLeftBar = scene.add.graphics()\r\n            .setVisible(false);\r\n        \r\n        this.comboTimeLeftText = scene.add.bitmapText(this.scoreTextWidth / 2, 40, 'TeenyTinyPixls', '', 10)\r\n            .setTintFill(0xffcc00)\r\n            .setOrigin(0.5, 0)\r\n            .setVisible(false);\r\n        \r\n        // Добавляем все элементы в контейнер\r\n        this.container.add([\r\n            this.scoreText,\r\n            this.comboText,\r\n            this.comboTimeLeftBar,\r\n            this.comboTimeLeftText\r\n        ]);\r\n    }\r\n\r\n    public updateScore(score: number): void {\r\n        const difference = score - this.lastScore;\r\n        this.scoreText.setText(score.toString());\r\n        this.scoreTextWidth = this.scoreText.width;\r\n        \r\n        // Обновляем позицию комбо текста при изменении ширины счета\r\n        this.comboText.setX(this.scoreTextWidth + 8);\r\n        \r\n        if (difference !== 0) {\r\n            this.showScoreChange(difference);\r\n        }\r\n        \r\n        this.lastScore = score;\r\n    }\r\n\r\n    private showScoreChange(amount: number): void {\r\n        const color = amount > 0 ? 0x00ff00 : 0xff0000;\r\n        const sign = amount > 0 ? '+' : '';\r\n\r\n        const changeTextX = sign === '+'\r\n                            ? this.scoreTextWidth + this.comboTextWidth / 2 + 2\r\n                            : this.scoreTextWidth / 2\r\n        \r\n        const changeText = this.scene.add.bitmapText(changeTextX, 27, 'TeenyTinyPixls', `${sign}${amount}`, 10)\r\n        .setTintFill(color)\r\n        .setOrigin(0.5)\r\n        \r\n        this.container.add(changeText);\r\n        \r\n        this.scene.tweens.add({\r\n            targets: changeText,\r\n            y: 60,\r\n            alpha: 0,\r\n            duration: 1000,\r\n            ease: 'Power1',\r\n            onComplete: () => {\r\n                this.container.remove(changeText);\r\n                changeText.destroy();\r\n            }\r\n        });\r\n    }\r\n\r\n    public updateCombo(combo: number, multiplier: number): void {\r\n        if (combo > 0) {\r\n            this.comboText.setText(`x${combo} (${multiplier.toFixed(1)}x)`);\r\n            this.showComboPopup(combo);\r\n            this.resetComboTimer();\r\n        } else {\r\n            this.comboText.setText('');\r\n            this.hideComboTimer();\r\n        }\r\n        this.comboTextWidth = this.comboText.width;\r\n    }\r\n\r\n    private showComboPopup(combo: number): void {\r\n        const comboPopup = this.scene.add.bitmapText(this.scene.scale.width / 2, 100, 'EpilepsySans', `COMBO x${combo}!`, 13)\r\n        .setTintFill(0xffffff)\r\n        .setOrigin(0.5);\r\n\r\n        \r\n        this.scene.tweens.add({\r\n            targets: comboPopup,\r\n            y: 150,\r\n            scale: 3,\r\n            alpha: 0,\r\n            duration: 800,\r\n            onComplete: () => comboPopup.destroy(),\r\n        });\r\n    }\r\n\r\n    private resetComboTimer(): void {\r\n        const combo = this.scoreSystem.getCurrentCombo();\r\n        if (combo > 0) {\r\n            const config = this.scoreSystem['config'] as ScoreSystemConfig;\r\n            this.comboTimeLeft = config.comboTimeout;\r\n            \r\n            this.comboTimeLeftBar.setVisible(true);\r\n            this.comboTimeLeftText.setVisible(true);\r\n            \r\n            this.updateComboTimerDisplay();\r\n        }\r\n    }\r\n\r\n    private updateComboTimerDisplay(): void {\r\n        const config = this.scoreSystem['config'] as ScoreSystemConfig;\r\n        const percent = this.comboTimeLeft / config.comboTimeout;\r\n        \r\n        // Обновляем полоску времени (ширина равна ширине текста счета)\r\n        this.comboTimeLeftBar.clear();\r\n        this.comboTimeLeftBar.fillStyle(0x666666);\r\n        this.comboTimeLeftBar.fillRect(0, 25, this.scoreTextWidth, 8);\r\n        this.comboTimeLeftBar.fillStyle(this.getTimerColor(percent));\r\n        this.comboTimeLeftBar.fillRect(0, 25, this.scoreTextWidth * percent, 8);\r\n        \r\n        // Обновляем текст (выровнен по центру полоски)\r\n        this.comboTimeLeftText.setX(this.scoreTextWidth / 2);\r\n        this.comboTimeLeftText.setText(`${(this.comboTimeLeft / 1000).toFixed(1)}`);\r\n    }\r\n\r\n    private getTimerColor(percent: number): number {\r\n        if (percent > 0.6) return 0x00ff00;\r\n        if (percent > 0.3) return 0xffff00;\r\n        return 0xff0000;\r\n    }\r\n\r\n    private hideComboTimer(): void {\r\n        this.comboTimeLeftBar.setVisible(false);\r\n        this.comboTimeLeftText.setVisible(false);\r\n    }\r\n\r\n    public showComboBreak(): void {\r\n        const breakText = this.scene.add.bitmapText(this.scene.scale.width / 2, 100, 'EpilepsySans', 'COMBO BREAK!', 26)\r\n        .setTintFill(0xff0000)\r\n        .setOrigin(0.5);\r\n        // const breakText = this.scene.add.text(\r\n        //     this.scene.scale.width / 2,\r\n        //     120,\r\n        //     'COMBO BREAK!',\r\n        //     {\r\n        //         fontFamily: 'Arial',\r\n        //         fontSize: '20px',\r\n        //         color: '#ff0000',\r\n        //         stroke: '#000000',\r\n        //         strokeThickness: 3\r\n        //     }\r\n        // ).setOrigin(0.5);\r\n        \r\n        this.scene.tweens.add({\r\n            targets: breakText,\r\n            alpha: 0,\r\n            y: 100,\r\n            duration: 800,\r\n            onComplete: () => breakText.destroy()\r\n        });\r\n\r\n        this.hideComboTimer();\r\n    }\r\n\r\n    public update(delta: number): void {\r\n        if (this.scoreSystem.getCurrentCombo() > 0 && this.comboTimeLeft > 0) {\r\n            this.comboTimeLeft -= delta;\r\n            this.comboTimeLeft = Math.max(0, this.comboTimeLeft);\r\n            this.updateComboTimerDisplay();\r\n        }\r\n    }\r\n}\r\n\r\nexport class TestScoreScene extends Phaser.Scene {\r\n    private scoreSystem!: ScoreSystem;\r\n    private scoreRenderer!: ScoreRenderer;\r\n\r\n    constructor() {\r\n        super('TestScoreScene');\r\n    }\r\n\r\n    preload(): void {\r\n        const assetLoader = new AssetLoader(this);\r\n\r\n        assetLoader.loadFonts()\r\n    }\r\n\r\n    create(): void {\r\n        // Инициализация системы с настройками\r\n        this.scoreSystem = new ScoreSystem(this, {\r\n            slimeKilled: 100,\r\n            comboMultiplierStep: 0.2,\r\n            comboTimeout: 2000 // 5 секунд на комбо\r\n        });\r\n\r\n        // Компактный рендерер\r\n        this.scoreRenderer = new ScoreRenderer(this, this.scoreSystem);\r\n\r\n        // Подписка на события\r\n        this.events.on('score_updated', (score: number) => {\r\n            this.scoreRenderer.updateScore(score);\r\n        });\r\n\r\n        this.events.on('combo_updated', (combo: number, multiplier: number) => {\r\n            this.scoreRenderer.updateCombo(combo, multiplier);\r\n        });\r\n\r\n        this.events.on('combo_reset', () => {\r\n            this.scoreRenderer.showComboBreak();\r\n        });\r\n\r\n        this.events.on('combo_timeout', () => {\r\n            this.scoreRenderer.showComboBreak();\r\n        });\r\n\r\n        // Компактные кнопки управления\r\n        this.createCompactControls();\r\n    }\r\n\r\n    private createCompactControls(): void {\r\n        const style = {\r\n            fontFamily: 'Arial',\r\n            fontSize: '14px',\r\n            color: '#000000',\r\n            backgroundColor: '#aaaaaa',\r\n            padding: { x: 8, y: 4 },\r\n            fixedWidth: 70,\r\n            align: 'center'\r\n        };\r\n        \r\n        const btnY = 440;\r\n        const btnSpacing = 75;\r\n        const startX = 10;\r\n        \r\n        this.add.text(startX, btnY, '1: Kill', style)\r\n            .setInteractive()\r\n            .on('pointerdown', () => this.emitSlimeKilled());\r\n        \r\n        this.add.text(startX + btnSpacing, btnY, '2: DMG', style)\r\n            .setInteractive()\r\n            .on('pointerdown', () => this.emitCharacterDamage());\r\n        \r\n        this.add.text(startX + btnSpacing*2, btnY, '3: Pass', style)\r\n            .setInteractive()\r\n            .on('pointerdown', () => this.emitSlimePassed());\r\n        \r\n        this.add.text(startX + btnSpacing*3, btnY, '4: Catch', style)\r\n            .setInteractive()\r\n            .on('pointerdown', () => this.emitProjectileCaught());\r\n\r\n        this.add.text(160, 480, 'Press 1-4 keys', {\r\n            fontFamily: 'Arial',\r\n            fontSize: '12px',\r\n            color: '#aaaaaa'\r\n        }).setOrigin(0.5);\r\n    }\r\n\r\n    private emitSlimeKilled(): void {\r\n        this.events.emit(GAME_EVENTS.SLIME_KILLED);\r\n        this.showEventEffect(100, 200, 0x00ff00);\r\n    }\r\n\r\n    private emitCharacterDamage(): void {\r\n        this.events.emit(GAME_EVENTS.CHARACTER_TOOK_DAMAGE);\r\n        this.showEventEffect(160, 250, 0xff0000);\r\n        this.cameras.main.shake(50, 0.005);\r\n    }\r\n\r\n    private emitSlimePassed(): void {\r\n        this.events.emit(GAME_EVENTS.SLIME_PASSED);\r\n        this.showEventEffect(220, 200, 0xffff00);\r\n    }\r\n\r\n    private emitProjectileCaught(): void {\r\n        this.events.emit(GAME_EVENTS.PROJECTILE_CAUGHT);\r\n        this.showEventEffect(160, 150, 0x00aaff);\r\n    }\r\n\r\n    private showEventEffect(x: number, y: number, color: number): void {\r\n        const effect = this.add.circle(x, y, 10, color)\r\n            .setAlpha(0.7);\r\n        \r\n        this.tweens.add({\r\n            targets: effect,\r\n            radius: 30,\r\n            alpha: 0,\r\n            duration: 400,\r\n            onComplete: () => effect.destroy()\r\n        });\r\n    }\r\n\r\n    update(time: number, delta: number): void {\r\n        this.scoreRenderer.update(delta);\r\n    }\r\n}","import './styles.css'\r\nimport { WORLD } from './constants';\r\nimport { GameScene } from './scenes';\r\nimport { TestScoreScene } from './scenes/test/TestScore';\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        parent: 'game-container',\r\n        width: WORLD.WIDTH,\r\n        height: WORLD.HEIGHT\r\n    },\r\n    // scene: [GameScene],\r\n    scene: [TestScoreScene],\r\n    pixelArt: true,\r\n    autoRound: true,\r\n    render: {\r\n        antialias: false,\r\n    },\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            gravity: { x: 0, y: 0 },\r\n            debug: false\r\n        }\r\n    },\r\n    input: {\r\n        touch: true\r\n    }\r\n};\r\nnew Phaser.Game(config);"],"names":["STRIPE","COUNT","WIDTH","CHARACTER","Math","floor","SLIME","Phaser","Input","Keyboard","KeyCodes","A","D","LEFT","RIGHT","W","UP","CharacterTexture","ViewDirection","CharacterStateType","GameState","HeartTexture","CharacterAnimationKey","GreenSlimeAnimationKey","PurpleSlimeAnimationKey","OrangeSlimeAnimationKey","RedSlimeAnimationKey","BlackSlimeAnimationKey","BlueSlimeAnimationKey","BlueSlimeDuplicantAnimationKey","SlimeType","SlimeTexture","AnimationManager","createAnimationFromConfig","object","animationConfig","anims","create","key","frames","generateFrameNumbers","texture","start","end","frameRate","repeat","yoyo","CharacterAnimationManager","createCharacterAnimations","character","this","created","ANIMATION_CONFIGS","forEach","config","reset","IDLE","WALK_RIGHT","WALK","DASH_RIGHT","DASH","DASH_UP","DASH_DOWN","DIE_RIGHT","DIE","DIE_UP","SlimeAnimationManager","createSlimeAnimations","scene","slimeType","createdAnimations","has","add","clear","GREEN","MOVE_DOWN","GREEN_MOVE","DIE_DOWN","GREEN_DIE","PURPLE","PURPLE_MOVE","MOVE_RIGHT","PURPLE_DIE","ORANGE","PROJECTILE_HIT","ORANGE_PROJECTILE","ORANGE_MOVE","ORANGE_DIE","SHOOT_DOWN","ORANGE_SHOOT","RED","RED_MOVE","RED_DIE","ATTACK","RED_ATTACK","BLACK","BLACK_MOVE","BLACK_DIE","HIDE","BLACK_HIDE","BLUE","BLUE_MOVE","DUPLICATE","BLUE_DUPLICATE","BLUE_DUPLICANT","BLUE_DUPLICANT_MOVE","BLUE_DUPLICANT_DIE","Set","AssetLoader","constructor","loadFonts","load","bitmapFont","loadHUDAssets","image","loadCharacterAssets","frameConfig","frameWidth","frameHeight","spritesheet","loadSlimeAssets","slimeFrameConfig","projectileFrameConfig","duplicantFrameConfig","Physics","Arcade","Sprite","MovementDirection","GAME_EVENTS","ScoreSystem","score","combo","comboMultiplier","comboTimeout","tookDamage","slimePassed","slimeKilled","projectileCaught","comboMultiplierStep","setupEventListeners","events","on","SLIME_KILLED","onSlimeKilled","CHARACTER_TOOK_DAMAGE","onTookDamage","onComboBreak","SLIME_PASSED","onSlimePassed","PROJECTILE_CAUGHT","onProjectileCaught","resetComboTimer","destroy","time","delayedCall","resetCombo","emit","increaseCombo","points","addScore","getCurrentScore","getCurrentCombo","getCurrentMultiplier","off","ScoreRenderer","scoreSystem","comboTimeLeft","lastScore","scoreTextWidth","comboTextWidth","container","scoreText","bitmapText","setTintFill","setOrigin","width","comboText","comboTimeLeftBar","graphics","setVisible","comboTimeLeftText","updateScore","difference","setText","toString","setX","showScoreChange","amount","color","sign","changeTextX","changeText","tweens","targets","y","alpha","duration","ease","onComplete","remove","updateCombo","multiplier","toFixed","showComboPopup","hideComboTimer","comboPopup","scale","updateComboTimerDisplay","percent","fillStyle","fillRect","getTimerColor","showComboBreak","breakText","update","delta","max","TestScoreScene","Scene","super","preload","scoreRenderer","createCompactControls","style","fontFamily","fontSize","backgroundColor","padding","x","fixedWidth","align","btnY","text","setInteractive","emitSlimeKilled","startX","emitCharacterDamage","emitSlimePassed","emitProjectileCaught","showEventEffect","cameras","main","shake","effect","circle","setAlpha","radius","type","AUTO","mode","Scale","FIT","parent","height","pixelArt","autoRound","render","antialias","physics","default","arcade","gravity","debug","input","touch","Game"],"sourceRoot":""}